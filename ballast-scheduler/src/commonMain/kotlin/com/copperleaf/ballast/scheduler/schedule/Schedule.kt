package com.copperleaf.ballast.scheduler.schedule

import kotlinx.datetime.Instant

/**
 * An interface for generating a non-persistent schedule of tasks.
 *
 * A Schedule produces an _ideal_ schedule, meaning it takes a starting [Instant] and generates a Sequence of future
 * Instants according to the schedule's algorithm. These are intended to be seen as the Instants which _should_ be
 * executed, but in reality some of these Instants might be dropped for a variety of reasons. A [ScheduleExecutor] is
 * responsible for "realizing" the generated schedule and sending callbacks at the appropriate time to the best of
 * its ability.
 *
 * The sequence generated by a Schedule should not be affected by time. It only uses the `start` Instant as a reference
 * point from which to calculate future tasks. There is also no expectation for how many tasks may be generated by the
 * sequence. It may be infinite, limited to a certain number of events, or empty (if no valid future events can be
 * calculated). Also, schedules should never include the starting Instant; it should generate Instants strictly in the
 * future.
 *
 * The entire sequence is meant for consumption by non-persistent schedulers, meaning ones that run entirely in-process
 * and do not attempt to preserve or restart work beyond app/device restarts. For persistent schedules, you should
 * configure something like Android's WorkManager.
 */
public fun interface Schedule {
    /**
     * Generate a potentially-infinite sequence of schedule instants, starting at (but not including) the [start].
     */
    public fun generateSchedule(start: Instant): Sequence<Instant>
}
